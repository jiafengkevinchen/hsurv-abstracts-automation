"""
Generate page proofs from compiled PDF file
"""

import PyPDF2 as pdf
from pydrive.auth import GoogleAuth # pip install pydrive
from pydrive.drive import GoogleDrive
import pandas as pd
from tqdm import tqdm
from string_funcs import *

tqdm.pandas()


# Google Docs API Authentication
# Need `client_secrets.json` (authentication file from Google APIs)
# in directory. See pyDrive documentation
gauth = GoogleAuth()
gauth.LocalWebserverAuth() # Creates local webserver and auto handles authentication.

drive = GoogleDrive(gauth)


# Parse index file to get page numbers for each author
lasts = []
firsts = []
pages = []

# search and parse the .idx file generated by tex
# to construct an author index
with open('../main.idx','rU') as f:
    index = f.read()
for name, page in re.findall(r'\{(.+?!.+?)\|.+\}\{(.+)\}',index):
    lasts.append(name.split('!')[0])
    firsts.append(name.split('!')[-1])
    pages.append(page)

pageproofs = pd.DataFrame({'last': lasts,
                           'first' : firsts,
                           'page' : pages})
pageproofs.to_csv('name_to_id')

# NOT FINISHED!

# somehow we should map first-last name to author ids
# csv contains 'page' and 'id' as columns
pageproofs = pd.read_csv('name_to_id.csv')


# page number in PDF file and page number on book are different
SHIFT = 5

# take in pdf file and search for each author's page, generate separate
# [id].pdf files for each author
for i, row in tqdm(pageproofs.iterrows()):
    pn = row['page']

    book = pdf.PdfFileReader('../main.pdf')

    p = book.getPage(int(pn) + SHIFT)
    p_nxt = book.getPage(int(pn) + SHIFT + 1)
    w = pdf.PdfFileWriter()

    w.addPage(p)
    w.addPage(p_nxt)

    stream = open('{}.pdf'.format(row['index']),'wb')
    w.write(stream=stream)
    stream.close()




# upload files to Google docs
links = []
for i in tqdm(range(101,182)):
    file_to_upload = drive.CreateFile({'title': '{}.pdf'.format(i)})
    file_to_upload.SetContentFile('{}.pdf'.format(i))
    file_to_upload.Upload()
    file_to_upload.InsertPermission({
                'type': 'anyone',
                'value': 'anyone',
                'role': 'writer',
                'withLink' : True})
    links.append(file_to_upload.metadata['alternateLink'])
